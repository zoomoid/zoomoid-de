name: Deploy

on:
  push:
    # branches: 
    #   - "main"
    # Publish semver tags as releases.
    tags: 
      - "v*.*.*"

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  DEPLOYMENT_NAME: zoomoid-de
  CONTAINER_NAME: zoomoid-de

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # for getting an OIDC token
      id-token: write
    steps:
      - name: Install OIDC Client from Core Package
        run: npm install @actions/core@1.6.0 @actions/http-client

      - name: Get Id Token
        uses: actions/github-script@v6
        id: idtoken
        with:
          script: |
            const c = require('@actions/core')
            let id_token = await c.getIDToken()
            c.setOutput('id_token', id_token)

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Setup cluster in kubeconfig
        run: |
          kubectl config set-cluster ${{ secrets.CLUSTER_NAME }} \
            --server=${{ secrets.CLUSTER_ENDPOINT }} \
            --certificate-authority=${{ secrets.CLUSTER_CERTIFICATE_AUTHORITY }}

      - name: Setup kubeconfig to use OIDC token
        run: |
          kubectl config set-credentials deployer \
            --token=${{ steps.idtoken.outputs.id_token }}

      - name: Setup context for kubectl
        run: |
          kubectl config set-context ${{ secrets.CLUSTER_NAME }} \
            --cluster=${{ secrets.CLUSTER_NAME }} \
            --namespace=${{ secrets.NAMESPACE }} \
            --user=deployer \
            --current=true

      - if: ${{ github.ref_type }} == "branch"
        name: Set image in deployment to ${{ env.IMAGE_NAME}}:${{ github.sha }}
        run: >-
          kubectl set image deployment ${{ env.DEPLOYMENT_NAME }}
          ${{ env.CONTAINER_NAME }}=${{ env.IMAGE_NAME }}:${{ github.sha }}
      
      - if: ${{ github.ref_type }} == "tag"
        name: Set image in deployment to ${{ env.IMAGE_NAME}}:${{ github.ref_name }}
        run: >-
            kubectl set image deployment ${{ env.DEPLOYMENT_NAME }}
            ${{ env.CONTAINER_NAME }}=${{ env.IMAGE_NAME }}:${{ github.ref_name }}
      
      - name: Wait for deployment progression
        run: kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} --timeout=2m
      
      - name: Show namespace status
        run: kubectl get deployments,pods,services,ingresses -l app.kubernetes.io/name=${{ env.DEPLOYMENT_NAME }}
      
      - name: Show events in namespace
        run: kubectl events --for=deployment/${{ env.DEPLOYMENT_NAME }}