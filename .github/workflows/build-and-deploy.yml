name: Build container image and deploy to cluster

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches:
      - main
    # Publish semver tags as releases.
    tags:
      - v*.*.*
  workflow_dispatch:
    inputs:
      image_tag:
        default: latest
        description: Image tag to build and deploy when triggering manually
        type: string
        required: true

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  DEPLOYMENT_NAME: zoomoid-de
  CONTAINER_NAME: zoomoid-de

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    if: ${{ github.event }} == "push"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=,format=long
            type=semver,pattern={{raw}}
            type=raw,value=latest,enable={{is_default_branch}}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      packages: write
      # for getting an OIDC token
      id-token: write
    steps:
      - name: Install OIDC Client from Core Package
        run: npm install @actions/core@1.6.0 @actions/http-client

      - name: Get Id Token
        uses: actions/github-script@v6
        id: idtoken
        with:
          script: |
            const c = require('@actions/core')
            let id_token = await c.getIDToken()
            c.setOutput('id_token', id_token)

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Setup cluster in kubeconfig
        run: |
          echo ${{ secrets.CLUSTER_CERTIFICATE_AUTHORITY }} | base64 --decode > ca.crt
          kubectl config set-cluster ${{ secrets.CLUSTER_NAME }} \
            --server=${{ secrets.CLUSTER_ENDPOINT }} \
            --certificate-authority="./ca.crt" \
            --embed-certs=true

      - name: Setup kubeconfig to use OIDC token
        run: |
          kubectl config set-credentials deployer \
            --token=${{ steps.idtoken.outputs.id_token }}

      - name: Setup context for kubectl
        run: |
          kubectl config set-context deployer \
            --cluster=${{ secrets.CLUSTER_NAME }} \
            --namespace=${{ secrets.NAMESPACE }} \
            --user=deployer
          kubectl config use-context deployer

      - name: Check authentication
        run: kubectl auth whoami

      - if: ${{ github.event_name }} == "push" ${{ github.ref_type }} == "branch"
        name: Set image in deployment to ${{ env.IMAGE_NAME}}:${{ github.sha }}
        run: >-
          kubectl set image deployment ${{ env.DEPLOYMENT_NAME }}
          ${{ env.CONTAINER_NAME }}=${{ env.IMAGE_NAME }}:${{ github.sha }}

      - if: ${{ github.event_name }} == "push" && ${{ github.ref_type }} == "tag"
        name: Set image in deployment to ${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        run: >-
          kubectl set image deployment ${{ env.DEPLOYMENT_NAME }}
          ${{ env.CONTAINER_NAME }}=${{ env.IMAGE_NAME }}:${{ github.ref_name }}

      - if: ${{ github.event_name }} == "workflow_dispatch"
        name: Set image in deployment to ${{ env.IMAGE_NAME }}:${{ inputs.image_tag }}
        run: >-
          kubectl set image deployment ${{ env.DEPLOYMENT_NAME }}
          ${{ env.CONTAINER_NAME }}=${{ env.IMAGE_NAME }}:${{ inputs.image_tag }}
  
      - name: Wait for deployment progression
        run: kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} --timeout=2m

      - name: Show namespace status
        run: kubectl get deployments,pods,services,ingresses -l app.kubernetes.io/name=${{ env.DEPLOYMENT_NAME }}

      - name: Show events in namespace
        run: kubectl events --for=deployment/${{ env.DEPLOYMENT_NAME }}
